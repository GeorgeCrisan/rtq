{"version":3,"sources":["assets/fog.jpg","utils.ts","api.ts","Components/QuestionCard.styles.ts","Components/QuestionCard.tsx","App.styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","randomizeArray","array","sort","Math","random","fetchQuizQuestions","amount","cat","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","incorrect_answers","correct_answer","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","style","fontSize","color","margin","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","catS","setCatS","tq","setTq","startTrivia","categories","mapCat","difs","slectedDif","slectedCat","localTq","toUpperCase","Number","newQuestions","marginTop","length","padding","background","undefined","e","currentTarget","prev","answerObject","nextQ","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.091727e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fog.713539fe.jpg\";","\n\nexport const randomizeArray = (array: any[]) => {\n  return array.sort(()=> Math.random() - 0.5 );\n}","import { randomizeArray } from './utils';\n\nexport type Question = {\n  categoryNr: number;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionsState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (amount: number, cat: number, difficulty: string): Promise<QuestionsState[]> => {\n  \n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=${cat}&difficulty=${difficulty}&type=multiple`;\n  \n  try{\n    const data = await (await fetch(endpoint)).json();\n    console.log('got the questions', data);\n    return data.results.map((question: Question) => ({\n      ...question,\n      answers: randomizeArray([...question.incorrect_answers, question.correct_answer])\n    }))\n\n  } catch(e) {\n    console.log(e, 'what error');\n    return [];\n  }\n  \n};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  min-width: 330px;\n  max-width: 1100px;\n  background: #286c82;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  margin-bottom: 16px;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 10px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 1px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;","import React from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className='number' style={{fontSize: 20, color: 'white'}}>\n      {`Question number: ${questionNr} out of ${totalQuestions} questions.`}\n    </p>\n    <p  style={{fontSize: 20, margin: 16, color: 'white'}} dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n            <span style={{fontSize: 16}} dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './assets/fog.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    font-family: 'Fira Sans', sans-serif;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p {\n    color: #fff;\n  }\n  .score {\n    color: white;\n    font-size: 2rem;\n    margin-bottom: 32px;\n    margin-top: 16px;\n  }\n  h1 {\n    font-family: 'Roboto', cursive;\n    background-image: linear-gradient(180deg, #87f1ff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 32px;\n    text-align: center;\n    margin: 20px;\n  }\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(to right, #00d2ff,#72bcd4);\n    border: 2px solid #286c82;\n    padding: 16px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 5px;\n    height: 80px;\n    margin: 20px 0;\n    padding: 0 40px;\n    width: 300px;\n    color: #fff;\n    font-size: 20px;\n  }\n`;","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './api';\nimport { randomizeArray } from './utils';\n// Components\nimport QuestionCard from './Components/QuestionCard';\n// types\nimport { QuestionsState } from './api';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [catS, setCatS] = useState('');\n  const [tq, setTq] = useState(15);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    let categories = ['17','18','20', '22','27'];\n    let difs = ['easy', 'medium', 'hard'];\n\n    let mapCat:any = {\n      '17': 'Science and Nature',\n      '18': 'Science of Computers',\n      '20': 'Mythologhy',\n      '22': 'Geography',\n      '27': 'Animals',\n      '28': 'Vehicles'\n    }\n\n    difs = randomizeArray(difs);\n    categories = randomizeArray(categories);\n\n    let slectedDif:any = difs[0];\n    let slectedCat:any = categories[0];\n    let localTq: number = tq;\n\n    if(slectedCat === '20' || slectedCat === '27') {\n      setTq(10);\n      localTq = 10;\n    }\n\n    setCatS(`Category: ${mapCat[slectedCat].toUpperCase()} with Difficulty: ${slectedDif.toUpperCase()}`);\n\n    const newQuestions = await fetchQuizQuestions(\n      localTq,\n      Number(slectedCat),\n      slectedDif\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === tq) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1 style={{marginTop: \"100px\"}} >Kyrill's Clever Quizz </h1>\n        {catS.length > 0  && <div style={{padding: '0 16px 0 16px', background: 'rgba(1,1,1,0.2)'}} >\n          <p style={{fontSize: 16, color: \"#87f1ff\" }} > {catS} </p>\n        </div>}\n        {gameOver || userAnswers.length === tq ? (\n          <button className='start' onClick={startTrivia}>\n            Are you ready to start? Then click here!\n          </button>\n        ) : null}\n        {!gameOver ? <p className='score'>{!gameOver && userAnswers.length !== tq ?\"Score\" : \"Final Score\"}: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={tq}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== tq- 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}